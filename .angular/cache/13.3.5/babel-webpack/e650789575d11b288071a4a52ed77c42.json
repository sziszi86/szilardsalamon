{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\n\nconst DIR_DOCUMENT = /*#__PURE__*/new InjectionToken('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY\n});\n/** @docs-private */\n\nfunction DIR_DOCUMENT_FACTORY() {\n  return inject(DOCUMENT);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\n\n\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\n\nfunction _resolveDirectionality(rawValue) {\n  const value = (rawValue === null || rawValue === void 0 ? void 0 : rawValue.toLowerCase()) || '';\n\n  if (value === 'auto' && typeof navigator !== 'undefined' && (navigator === null || navigator === void 0 ? void 0 : navigator.language)) {\n    return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n  }\n\n  return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\n\n\nlet Directionality = /*#__PURE__*/(() => {\n  class Directionality {\n    constructor(_document) {\n      /** The current 'ltr' or 'rtl' value. */\n      this.value = 'ltr';\n      /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n\n      this.change = new EventEmitter();\n\n      if (_document) {\n        const bodyDir = _document.body ? _document.body.dir : null;\n        const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n        this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n      }\n    }\n\n    ngOnDestroy() {\n      this.change.complete();\n    }\n\n  }\n\n  Directionality.ɵfac = function Directionality_Factory(t) {\n    return new (t || Directionality)(i0.ɵɵinject(DIR_DOCUMENT, 8));\n  };\n\n  Directionality.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Directionality,\n    factory: Directionality.ɵfac,\n    providedIn: 'root'\n  });\n  return Directionality;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\n\n\nlet Dir = /*#__PURE__*/(() => {\n  class Dir {\n    constructor() {\n      /** Normalized direction that accounts for invalid/unsupported values. */\n      this._dir = 'ltr';\n      /** Whether the `value` has been set to its initial value. */\n\n      this._isInitialized = false;\n      /** Event emitted when the direction changes. */\n\n      this.change = new EventEmitter();\n    }\n    /** @docs-private */\n\n\n    get dir() {\n      return this._dir;\n    }\n\n    set dir(value) {\n      const previousValue = this._dir; // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n      // whereas the browser does it based on the content of the element. Since doing so based\n      // on the content can be expensive, for now we're doing the simpler matching.\n\n      this._dir = _resolveDirectionality(value);\n      this._rawDir = value;\n\n      if (previousValue !== this._dir && this._isInitialized) {\n        this.change.emit(this._dir);\n      }\n    }\n    /** Current layout direction of the element. */\n\n\n    get value() {\n      return this.dir;\n    }\n    /** Initialize once default value has been set. */\n\n\n    ngAfterContentInit() {\n      this._isInitialized = true;\n    }\n\n    ngOnDestroy() {\n      this.change.complete();\n    }\n\n  }\n\n  Dir.ɵfac = function Dir_Factory(t) {\n    return new (t || Dir)();\n  };\n\n  Dir.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: Dir,\n    selectors: [[\"\", \"dir\", \"\"]],\n    hostVars: 1,\n    hostBindings: function Dir_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"dir\", ctx._rawDir);\n      }\n    },\n    inputs: {\n      dir: \"dir\"\n    },\n    outputs: {\n      change: \"dirChange\"\n    },\n    exportAs: [\"dir\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: Directionality,\n      useExisting: Dir\n    }])]\n  });\n  return Dir;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet BidiModule = /*#__PURE__*/(() => {\n  class BidiModule {}\n\n  BidiModule.ɵfac = function BidiModule_Factory(t) {\n    return new (t || BidiModule)();\n  };\n\n  BidiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BidiModule\n  });\n  BidiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return BidiModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };","map":{"version":3,"sources":["/Users/salamonszilard/work/szilardsalamon/szilardsalamon/node_modules/@angular/cdk/fesm2015/bidi.mjs"],"names":["i0","InjectionToken","inject","EventEmitter","Injectable","Optional","Inject","Directive","Output","Input","NgModule","DOCUMENT","DIR_DOCUMENT","providedIn","factory","DIR_DOCUMENT_FACTORY","RTL_LOCALE_PATTERN","_resolveDirectionality","rawValue","value","toLowerCase","navigator","language","test","Directionality","constructor","_document","change","bodyDir","body","dir","htmlDir","documentElement","ngOnDestroy","complete","ɵfac","ɵprov","Dir","_dir","_isInitialized","previousValue","_rawDir","emit","ngAfterContentInit","ɵdir","provide","useExisting","BidiModule","ɵmod","ɵinj"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex that matches locales with an RTL script. Taken from `goog.i18n.bidi.isRtlLanguage`. */\nconst RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;\n/** Resolves a string value to a specific direction. */\nfunction _resolveDirectionality(rawValue) {\n    const value = (rawValue === null || rawValue === void 0 ? void 0 : rawValue.toLowerCase()) || '';\n    if (value === 'auto' && typeof navigator !== 'undefined' && (navigator === null || navigator === void 0 ? void 0 : navigator.language)) {\n        return RTL_LOCALE_PATTERN.test(navigator.language) ? 'rtl' : 'ltr';\n    }\n    return value === 'rtl' ? 'rtl' : 'ltr';\n}\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    constructor(_document) {\n        /** The current 'ltr' or 'rtl' value. */\n        this.value = 'ltr';\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n        this.change = new EventEmitter();\n        if (_document) {\n            const bodyDir = _document.body ? _document.body.dir : null;\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            this.value = _resolveDirectionality(bodyDir || htmlDir || 'ltr');\n        }\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDirectionality.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Directionality, deps: [{ token: DIR_DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nDirectionality.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Directionality, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Directionality, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DIR_DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /** Normalized direction that accounts for invalid/unsupported values. */\n        this._dir = 'ltr';\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Event emitted when the direction changes. */\n        this.change = new EventEmitter();\n    }\n    /** @docs-private */\n    get dir() {\n        return this._dir;\n    }\n    set dir(value) {\n        const previousValue = this._dir;\n        // Note: `_resolveDirectionality` resolves the language based on the browser's language,\n        // whereas the browser does it based on the content of the element. Since doing so based\n        // on the content can be expensive, for now we're doing the simpler matching.\n        this._dir = _resolveDirectionality(value);\n        this._rawDir = value;\n        if (previousValue !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /** Current layout direction of the element. */\n    get value() {\n        return this.dir;\n    }\n    /** Initialize once default value has been set. */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDir.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nDir.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: Dir, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: Dir, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[dir]',\n                    providers: [{ provide: Directionality, useExisting: Dir }],\n                    host: { '[attr.dir]': '_rawDir' },\n                    exportAs: 'dir',\n                }]\n        }], propDecorators: { change: [{\n                type: Output,\n                args: ['dirChange']\n            }], dir: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BidiModule {\n}\nBidiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBidiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BidiModule, declarations: [Dir], exports: [Dir] });\nBidiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BidiModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: BidiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [Dir],\n                    declarations: [Dir],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\n"]},"metadata":{},"sourceType":"module"}