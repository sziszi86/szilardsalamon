{"ast":null,"code":"import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nclass MatDialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Custom class for the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n    /** Custom class for the backdrop. */\n\n    this.backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n    this.disableClose = false;\n    /** Width of the dialog. */\n\n    this.width = '';\n    /** Height of the dialog. */\n\n    this.height = '';\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n    this.maxWidth = '80vw';\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n\n    this.ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n\n    this.ariaLabel = null;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n\n    this.autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n\n    this.restoreFocus = true;\n    /** Whether to wait for the opening animation to finish before trapping focus. */\n\n    this.delayFocusTrap = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\n\nconst matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: /*#__PURE__*/trigger('dialogContainer', [\n  /*#__PURE__*/\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), /*#__PURE__*/state('enter', /*#__PURE__*/style({\n    transform: 'none'\n  })), /*#__PURE__*/transition('* => enter', /*#__PURE__*/group([/*#__PURE__*/animate('150ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    transform: 'none',\n    opacity: 1\n  })), /*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })])), /*#__PURE__*/transition('* => void, * => exit', /*#__PURE__*/group([/*#__PURE__*/animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })), /*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })]))])\n};\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\n\nfunction throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n\n\nlet _MatDialogContainerBase = /*#__PURE__*/(() => {\n  class _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document,\n    /** The dialog configuration. */\n    _config, _interactivityChecker, _ngZone, _focusMonitor) {\n      super();\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._config = _config;\n      this._interactivityChecker = _interactivityChecker;\n      this._ngZone = _ngZone;\n      this._focusMonitor = _focusMonitor;\n      /** Emits when an animation state changes. */\n\n      this._animationStateChanged = new EventEmitter();\n      /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n\n      this._elementFocusedBeforeDialogWasOpened = null;\n      /**\n       * Type of interaction that led to the dialog being closed. This is used to determine\n       * whether the focus style will be applied when returning focus to its original location\n       * after the dialog is closed.\n       */\n\n      this._closeInteractionType = null;\n      /**\n       * Attaches a DOM portal to the dialog container.\n       * @param portal Portal to be attached.\n       * @deprecated To be turned into a method.\n       * @breaking-change 10.0.0\n       */\n\n      this.attachDomPortal = portal => {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDialogContentAlreadyAttachedError();\n        }\n\n        return this._portalOutlet.attachDomPortal(portal);\n      };\n\n      this._ariaLabelledBy = _config.ariaLabelledBy || null;\n      this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n\n\n    _initializeWithAttachedContent() {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement); // Save the previously focused element. This element will be re-focused\n      // when the dialog closes.\n\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n      }\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n\n    attachComponentPortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n\n\n    attachTemplatePortal(portal) {\n      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatDialogContentAlreadyAttachedError();\n      }\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n\n\n    _recaptureFocus() {\n      if (!this._containsFocus()) {\n        this._trapFocus();\n      }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n\n\n    _forceFocus(element, options) {\n      if (!this._interactivityChecker.isFocusable(element)) {\n        element.tabIndex = -1; // The tabindex attribute should be removed to avoid navigating to that element again\n\n        this._ngZone.runOutsideAngular(() => {\n          const callback = () => {\n            element.removeEventListener('blur', callback);\n            element.removeEventListener('mousedown', callback);\n            element.removeAttribute('tabindex');\n          };\n\n          element.addEventListener('blur', callback);\n          element.addEventListener('mousedown', callback);\n        });\n      }\n\n      element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n\n\n    _focusByCssSelector(selector, options) {\n      let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n\n      if (elementToFocus) {\n        this._forceFocus(elementToFocus, options);\n      }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n\n\n    _trapFocus() {\n      const element = this._elementRef.nativeElement; // If were to attempt to focus immediately, then the content of the dialog would not yet be\n      // ready in instances where change detection has to run first. To deal with this, we simply\n      // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n      // dialog. If the element inside the dialog can't be focused, then the container is focused\n      // so the user can't tab into other elements behind it.\n\n      switch (this._config.autoFocus) {\n        case false:\n        case 'dialog':\n          // Ensure that focus is on the dialog container. It's possible that a different\n          // component tried to move focus while the open animation was running. See:\n          // https://github.com/angular/components/issues/16215. Note that we only want to do this\n          // if the focus isn't inside the dialog already, because it's possible that the consumer\n          // turned off `autoFocus` in order to move focus themselves.\n          if (!this._containsFocus()) {\n            element.focus();\n          }\n\n          break;\n\n        case true:\n        case 'first-tabbable':\n          this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n            // If we weren't able to find a focusable element in the dialog, then focus the dialog\n            // container instead.\n            if (!focusedSuccessfully) {\n              this._focusDialogContainer();\n            }\n          });\n\n          break;\n\n        case 'first-heading':\n          this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n\n          break;\n\n        default:\n          this._focusByCssSelector(this._config.autoFocus);\n\n          break;\n      }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n\n\n    _restoreFocus() {\n      const previousElement = this._elementFocusedBeforeDialogWasOpened; // We need the extra check, because IE can set the `activeElement` to null in some cases.\n\n      if (this._config.restoreFocus && previousElement && typeof previousElement.focus === 'function') {\n        const activeElement = _getFocusedElementPierceShadowDom();\n\n        const element = this._elementRef.nativeElement; // Make sure that focus is still inside the dialog or is on the body (usually because a\n        // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n        // the consumer moved it themselves before the animation was done, in which case we shouldn't\n        // do anything.\n\n        if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n          if (this._focusMonitor) {\n            this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n\n            this._closeInteractionType = null;\n          } else {\n            previousElement.focus();\n          }\n        }\n      }\n\n      if (this._focusTrap) {\n        this._focusTrap.destroy();\n      }\n    }\n    /** Focuses the dialog container. */\n\n\n    _focusDialogContainer() {\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n    /** Returns whether focus is inside the dialog. */\n\n\n    _containsFocus() {\n      const element = this._elementRef.nativeElement;\n\n      const activeElement = _getFocusedElementPierceShadowDom();\n\n      return element === activeElement || element.contains(activeElement);\n    }\n\n  }\n\n  _MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n    return new (t || _MatDialogContainerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n  };\n\n  _MatDialogContainerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatDialogContainerBase,\n    viewQuery: function _MatDialogContainerBase_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatDialogContainerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nlet MatDialogContainer = /*#__PURE__*/(() => {\n  class MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n      super(...arguments);\n      /** State of the dialog animation. */\n\n      this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n\n\n    _onAnimationDone({\n      toState,\n      totalTime\n    }) {\n      if (toState === 'enter') {\n        if (this._config.delayFocusTrap) {\n          this._trapFocus();\n        }\n\n        this._animationStateChanged.next({\n          state: 'opened',\n          totalTime\n        });\n      } else if (toState === 'exit') {\n        this._restoreFocus();\n\n        this._animationStateChanged.next({\n          state: 'closed',\n          totalTime\n        });\n      }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n\n\n    _onAnimationStart({\n      toState,\n      totalTime\n    }) {\n      if (toState === 'enter') {\n        this._animationStateChanged.next({\n          state: 'opening',\n          totalTime\n        });\n      } else if (toState === 'exit' || toState === 'void') {\n        this._animationStateChanged.next({\n          state: 'closing',\n          totalTime\n        });\n      }\n    }\n    /** Starts the dialog exit animation. */\n\n\n    _startExitAnimation() {\n      this._state = 'exit'; // Mark the container for check so it can react if the\n      // view container is using OnPush change detection.\n\n      this._changeDetectorRef.markForCheck();\n    }\n\n    _initializeWithAttachedContent() {\n      super._initializeWithAttachedContent();\n\n      if (!this._config.delayFocusTrap) {\n        this._trapFocus();\n      }\n    }\n\n  }\n\n  MatDialogContainer.ɵfac = /* @__PURE__ */function () {\n    let ɵMatDialogContainer_BaseFactory;\n    return function MatDialogContainer_Factory(t) {\n      return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatDialogContainer)))(t || MatDialogContainer);\n    };\n  }();\n\n  MatDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDialogContainer,\n    selectors: [[\"mat-dialog-container\"]],\n    hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx._id);\n        i0.ɵɵattribute(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        i0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [i3.CdkPortalOutlet],\n    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [matDialogAnimations.dialogContainer]\n    }\n  });\n  return MatDialogContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n\n\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\nclass MatDialogRef {\n  constructor(_overlayRef, _containerInstance,\n  /** Id of the dialog. */\n  id = `mat-dialog-${uniqueId++}`) {\n    this._overlayRef = _overlayRef;\n    this._containerInstance = _containerInstance;\n    this.id = id;\n    /** Whether the user is allowed to close the dialog. */\n\n    this.disableClose = this._containerInstance._config.disableClose;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* OPEN */\n    ; // Pass the id along to the container.\n\n    _containerInstance._id = id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n\n      this._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n\n      this._beforeClosed.complete();\n\n      this._afterClosed.next(this._result);\n\n      this._afterClosed.complete();\n\n      this.componentInstance = null;\n\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents().pipe(filter(event => {\n      return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n    })).subscribe(event => {\n      event.preventDefault();\n\n      _closeDialogVia(this, 'keyboard');\n    });\n\n    _overlayRef.backdropClick().subscribe(() => {\n      if (this.disableClose) {\n        this._containerInstance._recaptureFocus();\n      } else {\n        _closeDialogVia(this, 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  close(dialogResult) {\n    this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1)).subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n\n      this._beforeClosed.complete();\n\n      this._overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n    });\n\n    this._state = 1\n    /* CLOSING */\n    ;\n\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n\n\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n\n\n  afterClosed() {\n    return this._afterClosed;\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n\n\n  beforeClosed() {\n    return this._beforeClosed;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n\n\n  backdropClick() {\n    return this._overlayRef.backdropClick();\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n\n\n  keydownEvents() {\n    return this._overlayRef.keydownEvents();\n  }\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n\n\n  updatePosition(position) {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n\n\n  updateSize(width = '', height = '') {\n    this._overlayRef.updateSize({\n      width,\n      height\n    });\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    this._overlayRef.addPanelClass(classes);\n\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    this._overlayRef.removePanelClass(classes);\n\n    return this;\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n\n\n  getState() {\n    return this._state;\n  }\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n\n\n  _finishDialogClose() {\n    this._state = 2\n    /* CLOSED */\n    ;\n\n    this._overlayRef.dispose();\n  }\n  /** Fetches the position strategy object from the overlay ref. */\n\n\n  _getPositionStrategy() {\n    return this._overlayRef.getConfig().positionStrategy;\n  }\n\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n  // For those, we keep the behavior as is and do not deal with the interaction type.\n  if (ref._containerInstance !== undefined) {\n    ref._containerInstance._closeInteractionType = interactionType;\n  }\n\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nconst MAT_DIALOG_DATA = /*#__PURE__*/new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nconst MAT_DIALOG_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nconst MAT_DIALOG_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nlet _MatDialogBase = /*#__PURE__*/(() => {\n  class _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken,\n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n      this._overlay = _overlay;\n      this._injector = _injector;\n      this._defaultOptions = _defaultOptions;\n      this._parentDialog = _parentDialog;\n      this._overlayContainer = _overlayContainer;\n      this._dialogRefConstructor = _dialogRefConstructor;\n      this._dialogContainerType = _dialogContainerType;\n      this._dialogDataToken = _dialogDataToken;\n      this._openDialogsAtThisLevel = [];\n      this._afterAllClosedAtThisLevel = new Subject();\n      this._afterOpenedAtThisLevel = new Subject();\n      this._ariaHiddenElements = new Map(); // TODO (jelbourn): tighten the typing right-hand side of this expression.\n\n      /**\n       * Stream that emits when all open dialog have finished closing.\n       * Will emit on subscribe if there are no open dialogs to begin with.\n       */\n\n      this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n      this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n\n\n    get openDialogs() {\n      return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n\n\n    get afterOpened() {\n      return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n\n    _getAfterAllClosed() {\n      const parent = this._parentDialog;\n      return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n\n    open(componentOrTemplateRef, config) {\n      config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n      if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n      }\n\n      const overlayRef = this._createOverlay(config);\n\n      const dialogContainer = this._attachDialogContainer(overlayRef, config);\n\n      const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config); // If this is the first dialog that we're opening, hide all the non-overlay content.\n\n\n      if (!this.openDialogs.length) {\n        this._hideNonDialogContentFromAssistiveTechnology();\n      }\n\n      this.openDialogs.push(dialogRef);\n      dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n      this.afterOpened.next(dialogRef); // Notify the dialog container that the content has been attached.\n\n      dialogContainer._initializeWithAttachedContent();\n\n      return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n\n\n    closeAll() {\n      this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n\n\n    getDialogById(id) {\n      return this.openDialogs.find(dialog => dialog.id === id);\n    }\n\n    ngOnDestroy() {\n      // Only close the dialogs at this level on destroy\n      // since the parent service may still be active.\n      this._closeDialogs(this._openDialogsAtThisLevel);\n\n      this._afterAllClosedAtThisLevel.complete();\n\n      this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n\n\n    _createOverlay(config) {\n      const overlayConfig = this._getOverlayConfig(config);\n\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n\n\n    _getOverlayConfig(dialogConfig) {\n      const state = new OverlayConfig({\n        positionStrategy: this._overlay.position().global(),\n        scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n        panelClass: dialogConfig.panelClass,\n        hasBackdrop: dialogConfig.hasBackdrop,\n        direction: dialogConfig.direction,\n        minWidth: dialogConfig.minWidth,\n        minHeight: dialogConfig.minHeight,\n        maxWidth: dialogConfig.maxWidth,\n        maxHeight: dialogConfig.maxHeight,\n        disposeOnNavigation: dialogConfig.closeOnNavigation\n      });\n\n      if (dialogConfig.backdropClass) {\n        state.backdropClass = dialogConfig.backdropClass;\n      }\n\n      return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n\n\n    _attachDialogContainer(overlay, config) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      const injector = Injector.create({\n        parent: userInjector || this._injector,\n        providers: [{\n          provide: MatDialogConfig,\n          useValue: config\n        }]\n      });\n      const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n      const containerRef = overlay.attach(containerPortal);\n      return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n\n\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n      // Create a reference to the dialog we're creating in order to give the user a handle\n      // to modify and close it.\n      const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n\n      if (componentOrTemplateRef instanceof TemplateRef) {\n        dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n          $implicit: config.data,\n          dialogRef\n        }));\n      } else {\n        const injector = this._createInjector(config, dialogRef, dialogContainer);\n\n        const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n        dialogRef.componentInstance = contentRef.instance;\n      }\n\n      dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n      return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n\n\n    _createInjector(config, dialogRef, dialogContainer) {\n      const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector; // The dialog container should be provided as the dialog container and the dialog's\n      // content are created out of the same `ViewContainerRef` and as such, are siblings\n      // for injector purposes. To allow the hierarchy that is expected, the dialog\n      // container is explicitly provided in the injector.\n\n      const providers = [{\n        provide: this._dialogContainerType,\n        useValue: dialogContainer\n      }, {\n        provide: this._dialogDataToken,\n        useValue: config.data\n      }, {\n        provide: this._dialogRefConstructor,\n        useValue: dialogRef\n      }];\n\n      if (config.direction && (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n        providers.push({\n          provide: Directionality,\n          useValue: {\n            value: config.direction,\n            change: of()\n          }\n        });\n      }\n\n      return Injector.create({\n        parent: userInjector || this._injector,\n        providers\n      });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n\n\n    _removeOpenDialog(dialogRef) {\n      const index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1); // If all the dialogs were closed, remove/restore the `aria-hidden`\n        // to a the siblings and emit to the `afterAllClosed` stream.\n\n        if (!this.openDialogs.length) {\n          this._ariaHiddenElements.forEach((previousValue, element) => {\n            if (previousValue) {\n              element.setAttribute('aria-hidden', previousValue);\n            } else {\n              element.removeAttribute('aria-hidden');\n            }\n          });\n\n          this._ariaHiddenElements.clear();\n\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n\n\n    _hideNonDialogContentFromAssistiveTechnology() {\n      const overlayContainer = this._overlayContainer.getContainerElement(); // Ensure that the overlay container is attached to the DOM.\n\n\n      if (overlayContainer.parentElement) {\n        const siblings = overlayContainer.parentElement.children;\n\n        for (let i = siblings.length - 1; i > -1; i--) {\n          let sibling = siblings[i];\n\n          if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n            this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n\n            sibling.setAttribute('aria-hidden', 'true');\n          }\n        }\n      }\n    }\n    /** Closes all of the dialogs in an array. */\n\n\n    _closeDialogs(dialogs) {\n      let i = dialogs.length;\n\n      while (i--) {\n        // The `_openDialogs` property isn't updated after close until the rxjs subscription\n        // runs on the next microtask, in addition to modifying the array as we're going\n        // through it. We loop through all of them and call close without assuming that\n        // they'll be removed from the list instantaneously.\n        dialogs[i].close();\n      }\n    }\n\n  }\n\n  _MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  _MatDialogBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatDialogBase\n  });\n  return _MatDialogBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nlet MatDialog = /*#__PURE__*/(() => {\n  class MatDialog extends _MatDialogBase {\n    constructor(overlay, injector,\n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer,\n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n      super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n\n  }\n\n  MatDialog.ɵfac = function MatDialog_Factory(t) {\n    return new (t || MatDialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.Location, 8), i0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), i0.ɵɵinject(MatDialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatDialog,\n    factory: MatDialog.ɵfac\n  });\n  return MatDialog;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\n\n\nfunction _applyConfigDefaults(config, defaultOptions) {\n  return Object.assign(Object.assign({}, defaultOptions), config);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nlet MatDialogClose = /*#__PURE__*/(() => {\n  class MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n      this.dialogRef = dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Default to \"button\" to prevents accidental form submits. */\n\n      this.type = 'button';\n    }\n\n    ngOnInit() {\n      if (!this.dialogRef) {\n        // When this directive is included in a dialog via TemplateRef (rather than being\n        // in a Component), the DialogRef isn't available via injection because embedded\n        // views cannot be given a custom injector. Instead, we look up the DialogRef by\n        // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n        // be resolved at constructor time.\n        this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n    }\n\n    ngOnChanges(changes) {\n      const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n      if (proxiedChange) {\n        this.dialogResult = proxiedChange.currentValue;\n      }\n    }\n\n    _onButtonClick(event) {\n      // Determinate the focus origin using the click event, because using the FocusMonitor will\n      // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n      // dialog, and therefore clicking the button won't result in a focus change. This means that\n      // the FocusMonitor won't detect any origin change, and will always output `program`.\n      _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n\n  }\n\n  MatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n    return new (t || MatDialogClose)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogClose.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogClose,\n    selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n          return ctx._onButtonClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      type: \"type\",\n      dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n      _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n    },\n    exportAs: [\"matDialogClose\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return MatDialogClose;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nlet MatDialogTitle = /*#__PURE__*/(() => {\n  class MatDialogTitle {\n    constructor( // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n      this._dialogRef = _dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n\n      this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n\n    ngOnInit() {\n      if (!this._dialogRef) {\n        this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n      }\n\n      if (this._dialogRef) {\n        Promise.resolve().then(() => {\n          const container = this._dialogRef._containerInstance;\n\n          if (container && !container._ariaLabelledBy) {\n            container._ariaLabelledBy = this.id;\n          }\n        });\n      }\n    }\n\n  }\n\n  MatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n    return new (t || MatDialogTitle)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogTitle,\n    selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-title\"],\n    hostVars: 1,\n    hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    exportAs: [\"matDialogTitle\"]\n  });\n  return MatDialogTitle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nlet MatDialogContent = /*#__PURE__*/(() => {\n  class MatDialogContent {}\n\n  MatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n    return new (t || MatDialogContent)();\n  };\n\n  MatDialogContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogContent,\n    selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-content\"]\n  });\n  return MatDialogContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nlet MatDialogActions = /*#__PURE__*/(() => {\n  class MatDialogActions {}\n\n  MatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n    return new (t || MatDialogActions)();\n  };\n\n  MatDialogActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogActions,\n    selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-actions\"]\n  });\n  return MatDialogActions;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatDialogModule = /*#__PURE__*/(() => {\n  class MatDialogModule {}\n\n  MatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n    return new (t || MatDialogModule)();\n  };\n\n  MatDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatDialogModule\n  });\n  MatDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n    imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule]\n  });\n  return MatDialogModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };","map":{"version":3,"sources":["/Users/salamonszilard/work/szilardsalamon/szilardsalamon/node_modules/@angular/material/fesm2015/dialog.mjs"],"names":["i1$1","Overlay","OverlayConfig","OverlayModule","i3","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","i0","EventEmitter","Directive","Optional","Inject","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injector","TemplateRef","InjectFlags","Injectable","SkipSelf","Input","NgModule","MatCommonModule","Directionality","Subject","defer","of","filter","take","startWith","_getFocusedElementPierceShadowDom","i2","DOCUMENT","trigger","state","style","transition","group","animate","query","animateChild","i1","ESCAPE","hasModifierKey","ANIMATION_MODULE_TYPE","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","delayFocusTrap","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","optional","throwMatDialogContentAlreadyAttachedError","Error","_MatDialogContainerBase","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_interactivityChecker","_ngZone","_focusMonitor","_animationStateChanged","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","_ariaLabelledBy","_initializeWithAttachedContent","_focusTrap","create","nativeElement","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_trapFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","querySelector","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","_restoreFocus","previousElement","activeElement","body","contains","focusVia","destroy","ɵfac","ElementRef","FocusTrapFactory","ChangeDetectorRef","InteractivityChecker","NgZone","FocusMonitor","ɵdir","MatDialogContainer","arguments","_state","_onAnimationDone","toState","totalTime","next","_onAnimationStart","_startExitAnimation","markForCheck","ɵcmp","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","_id","pipe","event","subscribe","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","close","dialogResult","detachBackdrop","setTimeout","afterOpened","afterClosed","beforeClosed","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","getConfig","positionStrategy","ref","interactionType","result","undefined","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","_MatDialogBase","_overlay","_injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_animationMode","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_getAfterAllClosed","_scrollStrategy","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","MatDialog","location","defaultOptions","parentDialog","animationMode","Location","OverlayContainer","ɵprov","Object","assign","dialogElementUid","MatDialogClose","_dialog","type","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","MatDialogTitle","_dialogRef","Promise","resolve","container","MatDialogContent","MatDialogActions","classList","MatDialogModule","ɵmod","ɵinj"],"mappings":"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","sourcesContent":["import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Optional, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injector, TemplateRef, InjectFlags, Injectable, SkipSelf, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ])),\n        transition('* => void, * => exit', group([\n            animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ])),\n    ]),\n};\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\nclass _MatDialogContainerBase extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _interactivityChecker, _ngZone, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._focusMonitor = _focusMonitor;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /** Initializes the dialog container with the attached content. */\n    _initializeWithAttachedContent() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        // Save the previously focused element. This element will be re-focused\n        // when the dialog closes.\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n        }\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n}\n_MatDialogContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });\n_MatDialogContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatDialogContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1.FocusMonitor }];\n    }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor() {\n        super(...arguments);\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            if (this._config.delayFocusTrap) {\n                this._trapFocus();\n            }\n            this._animationStateChanged.next({ state: 'opened', totalTime });\n        }\n        else if (toState === 'exit') {\n            this._restoreFocus();\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    _initializeWithAttachedContent() {\n        super._initializeWithAttachedContent();\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n}\nMatDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\", \"aria-modal\": \"true\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"id\": \"_id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_state\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], directives: [{ type: i3.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        'aria-modal': 'true',\n                        '[id]': '_id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': '_state',\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, \n    /** Id of the dialog. */\n    id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef\n            .keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._overlayRef.updateSize({ width, height });\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        // Notify the dialog container that the content has been attached.\n        dialogContainer._initializeWithAttachedContent();\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation,\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this._dialogContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping dialog container.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new this._dialogRefConstructor(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n                $implicit: config.data,\n                dialogRef,\n            }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef.updateSize(config.width, config.height).updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param dialogContainer Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The dialog container should be provided as the dialog container and the dialog's\n        // content are created out of the same `ViewContainerRef` and as such, are siblings\n        // for injector purposes. To allow the hierarchy that is expected, the dialog\n        // container is explicitly provided in the injector.\n        const providers = [\n            { provide: this._dialogContainerType, useValue: dialogContainer },\n            { provide: this._dialogDataToken, useValue: config.data },\n            { provide: this._dialogRefConstructor, useValue: dialogRef },\n        ];\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, InjectFlags.Optional))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._getAfterAllClosed().next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatDialogBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatDialogBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatDialogBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n}\nMatDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                        type: Optional\n                    }] }, { type: MatDialogConfig, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DIALOG_SCROLL_STRATEGY]\n                    }] }, { type: MatDialog, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", host: { classAttribute: \"mat-dialog-actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: { 'class': 'mat-dialog-actions' },\n                }]\n        }] });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent], imports: [OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule] });\nMatDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [[OverlayModule, PortalModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogContent,\n                        MatDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogActions,\n                        MatDialogContent,\n                    ],\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n"]},"metadata":{},"sourceType":"module"}