{"ast":null,"code":"import { ourProjects } from './projects';\nimport * as i0 from \"@angular/core\";\nexport let ProjectService = /*#__PURE__*/(() => {\n  class ProjectService {\n    constructor() {\n      this.projectPromise = Promise.resolve(ourProjects);\n    }\n\n    getProjects() {\n      return this.projectPromise;\n    }\n\n    getOneProject(id) {\n      return this.projectPromise.then(project => project.find(project => project.id === +id));\n    }\n\n  }\n\n  ProjectService.ɵfac = function ProjectService_Factory(t) {\n    return new (t || ProjectService)();\n  };\n\n  ProjectService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac\n  });\n  return ProjectService;\n})();","map":{"version":3,"sources":["/Users/salamonszilard/work/szilardsalamon/szilardsalamon/src/app/modules/shared/project.service.ts"],"names":["ourProjects","i0","ProjectService","constructor","projectPromise","Promise","resolve","getProjects","getOneProject","id","then","project","find","ɵfac","ProjectService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"AAAA,SAASA,WAAT,QAA4B,YAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,WAAaC,cAAb;AAAO,QAAMA,cAAN,CAAqB;AACxBC,IAAAA,WAAW,GAAG;AACV,WAAKC,cAAL,GAAsBC,OAAO,CAACC,OAAR,CAAgBN,WAAhB,CAAtB;AACH;;AACDO,IAAAA,WAAW,GAAG;AACV,aAAO,KAAKH,cAAZ;AACH;;AACDI,IAAAA,aAAa,CAACC,EAAD,EAAK;AACd,aAAO,KAAKL,cAAL,CACFM,IADE,CACGC,OAAO,IAAIA,OAAO,CAACC,IAAR,CAAaD,OAAO,IAAIA,OAAO,CAACF,EAAR,KAAe,CAACA,EAAxC,CADd,CAAP;AAEH;;AAVuB;;AAY5BP,EAAAA,cAAc,CAACW,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,WAAO,KAAKA,CAAC,IAAIb,cAAV,GAAP;AAAqC,GAAhG;;AACAA,EAAAA,cAAc,CAACc,KAAf,GAAuB,aAAcf,EAAE,CAACgB,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAEhB,cAAT;AAAyBiB,IAAAA,OAAO,EAAEjB,cAAc,CAACW;AAAjD,GAAtB,CAArC;AAbA,SAAaX,cAAb;AAAA","sourcesContent":["import { ourProjects } from './projects';\nimport * as i0 from \"@angular/core\";\nexport class ProjectService {\n    constructor() {\n        this.projectPromise = Promise.resolve(ourProjects);\n    }\n    getProjects() {\n        return this.projectPromise;\n    }\n    getOneProject(id) {\n        return this.projectPromise\n            .then(project => project.find(project => project.id === +id));\n    }\n}\nProjectService.ɵfac = function ProjectService_Factory(t) { return new (t || ProjectService)(); };\nProjectService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProjectService, factory: ProjectService.ɵfac });\n"]},"metadata":{},"sourceType":"module"}